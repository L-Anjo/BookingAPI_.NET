// <auto-generated />
using System;
using EzBooking.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EzBooking.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EzBooking.Models.House", b =>
                {
                    b.Property<int>("id_house")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_house"), 1L, 1);

                    b.Property<int>("StatusHouseid")
                        .HasColumnType("int");

                    b.Property<int?>("codDoor")
                        .HasColumnType("int");

                    b.Property<int>("doorNumber")
                        .HasColumnType("int");

                    b.Property<int>("floorNumber")
                        .HasColumnType("int");

                    b.Property<int>("guestsNumber")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("postalCode")
                        .HasColumnType("int");

                    b.Property<double?>("price")
                        .HasColumnType("float");

                    b.Property<double?>("priceyear")
                        .HasColumnType("float");

                    b.Property<string>("propertyAssessment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("road")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("sharedRoom")
                        .HasColumnType("bit");

                    b.HasKey("id_house");

                    b.HasIndex("StatusHouseid");

                    b.HasIndex("postalCode");

                    b.ToTable("Houses");
                });

            modelBuilder.Entity("EzBooking.Models.PostalCode", b =>
                {
                    b.Property<int>("postalCode")
                        .HasColumnType("int");

                    b.Property<string>("concelho")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("district")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("postalCode");

                    b.ToTable("PostalCodes");
                });

            modelBuilder.Entity("EzBooking.Models.StatusHouse", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("StatusHouses");
                });

            modelBuilder.Entity("EzBooking.Models.User", b =>
                {
                    b.Property<int>("id_user")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_user"), 1L, 1);

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id_user");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EzBooking.Models.House", b =>
                {
                    b.HasOne("EzBooking.Models.StatusHouse", "StatusHouse")
                        .WithMany("Houses")
                        .HasForeignKey("StatusHouseid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EzBooking.Models.PostalCode", "PostalCode")
                        .WithMany("Houses")
                        .HasForeignKey("postalCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PostalCode");

                    b.Navigation("StatusHouse");
                });

            modelBuilder.Entity("EzBooking.Models.PostalCode", b =>
                {
                    b.Navigation("Houses");
                });

            modelBuilder.Entity("EzBooking.Models.StatusHouse", b =>
                {
                    b.Navigation("Houses");
                });
#pragma warning restore 612, 618
        }
    }
}
